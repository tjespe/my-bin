#!/usr/bin/env python3

"""
DCDE - Docker Compose Djano Exec

Searches in the relevant docker-compose config for a container that runs a Django server,
and executes "python manage.py ...args..." in that container.

In a way, this script is an alias for "docker-compose exec <django-container-name>"
"""

from subprocess import Popen, PIPE, run
from os import getcwd
import sys
import json
import yaml

CACHE_FILE = "/tmp/dcm-cache"

def get_container_key_from_config():
    proc = Popen(["docker-compose", "config"], stdout=PIPE)
    outs, _ = proc.communicate()

    parsed = yaml.safe_load(outs)

    for key, config in parsed["services"].items():
        if "manage.py" and "runserver" in config.get("command", ""):
            return key

def get_container_key_from_cache():
    try:
        cache = json.load(open(CACHE_FILE, "r"))
        return cache.get(getcwd())
    except (FileNotFoundError, json.JSONDecodeError):
        return

def add_key_to_cache(key):
    cache = {}
    try:
        cache = json.load(open(CACHE_FILE, "r"))
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    cache[getcwd()] = key
    json.dump(cache, open(CACHE_FILE, "w"))

def get_django_container_key():
    if cached_key := get_container_key_from_cache():
        return cached_key
    key = get_container_key_from_config()
    add_key_to_cache(key)
    return key

container_key = get_django_container_key()
if sys.argv[1] in ["up", "start"]:
    result = run(
        ["docker-compose", "up", "-d", container_key],
        check=False
    )
else:
    result = run(
        ["docker-compose", "exec", "-u" "root", container_key] + sys.argv[1:],
        check=False
    )
sys.exit(result.returncode)
